#!/usr/bin/env ruby

require 'optparse'
require_relative 'spec'

SECTIONS = []
IGNORE_SECTIONS = []

OptParse.new.instance_exec do
	on '-s', '--section=SECTION1[,...]', 'Test the given sections (eg 4.2.2)', Array do |secs|
		secs.each do |sec|
			abort "invalid section name: '#{sec}'" unless sec.match? /\A\d+(?:\.\d+){,2}$/
		end

		SECTIONS.concat secs
	end

	on '-S', '--ignore-section=SECTION1[,...]', 'Ignore the given sections (eg 4.2.2)', Array do |secs|
		secs.each do |sec|
			abort "invalid section name: '#{sec}'" unless sec.match? /\A\d+(?:\.\d+){,2}$/
		end

		IGNORE_SECTIONS.concat secs
	end

	on '-e', '--executable=PATH', "Perform tests against 'PATH' (default=./knight)" do |file|
		Kn::Test.executable = file
	end

	on '-z', '--sanitize=[SAN,...]', 'Also test the SANS; without args, tests all', Array do |san|
		if san
			Kn::Test.sanitizations.concat san.map(&:to_sym)
		else
			Kn::Test.sanitizations = Kn::Test::ALL_SANITIZATIONS.dup
		end
	end

	on '-Z', '--dont-sanitize[=SAN,...]', 'Do not test SANS; disables all without args', Array do |san|
		if san
			Kn::Test.sanitizations -= san.map(&:to_sym)
		else
			Kn::Test.sanitizations.clear
		end
	end

	# on      '--[no-]sanitize=[SAN[,...]]', 'Only test the given sanitizations. With `--no`,',
	# 	'disables all. Without arguments, enables all', Array do |sans| 
	# 	case sans
	# 	when false then Kn::Test.sanitizations.clear
	# 	when nil   then Kn::Test.sanitizations = Kn::Test::ALL_SANITIZATIONS
	# 	else            Kn::Test.sanitizations = sans.map(&:to_sym)
	# 	end
	# end

	on_tail <<~EOS
	Sanitization:
	    (Note: Sanitizers expect a nonzero exit code to indicate a program failure).

	    The following sanitizations are enabled by default:
	    - zero_division         Division by zero, modulo by zero, and raising 0 to a
	                            negative power.
	    - invalid_types         Either attempted assignment to a nonvariable, or passing
	                            one of `+-*/%^<>` a type undefined for the function.
	    - argument_count        A function is called with too few arguments. (eg `+ 1`.)
	    - undefined_variables   Fetching the value of an unassigned variale.

	    Additionally, these sanitizations may be enabled via `--sanitize`:
	    - strict_types          The return value of `BLOCK` is passed to a function
	                            which doesn't have set semantics for it.
	    - overflow              A function causes an integral number to overflow.
	    - invalid_values        A function is called with a valid type, but which has an
	                            invalid value. (e.g. `* "hi" (- 0 1)`)
	    - io_errors             Problems arising during input/output operations.
	    - strict_compliance     Misc. undefined behaviour that's hard to verify.
	EOS

	parse!
	Kn::Test.executable = $*.shift if $*.length == 1 # allow for trailing program name
end

# sanity check
begin
	Kn::Test.exec "0"
rescue
	abort "The given program is not executable.\nDid you mean: ./#{Kn::Test.executable.join ' '}"
end

require 'minitest/autorun' # only after we confirmed we don't have a usage error


(SECTIONS.empty? ? %w(1 2 3 4) : SECTIONS).each do |section|
	major, minor, patch = section.to_s.split('.')
	glob = 
		case
		when patch then File.join "#{major}-*", "#{major}.#{minor}-*", "#{section}-*.rb"
		when minor then File.join "#{major}-*", "#{major}.#{minor}-*", "*.rb"
		when major then File.join "#{major}-*", "**/*.rb"
		else raise "bad section: #{section.inspect}"
		end

	Dir.glob File.join __dir__, "unit", glob do |testfile|
		next if IGNORE_SECTIONS.any? { |s| testfile.match? %r{/#{Regexp.escape s}-[^/.]*\.rb} }
		require testfile
	end
end

